(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     83704,       1648]
NotebookOptionsPosition[     36227,        780]
NotebookOutlinePosition[     82531,       1634]
CellTagsIndexPosition[     82488,       1631]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"<<", "AceGen`"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"1", " ", "incident", " ", "node"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"2", "--"}], "4", " ", "triangle"}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.466407815238911*^9, 3.466407821320537*^9}, 
   3.608447731496468*^9, {3.8725363879217*^9, 3.872536401992441*^9}, {
   3.872814318839406*^9, 3.87281433156901*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"f10c1fdb-7478-48c6-a90d-bff160ea7957"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SMSInitialize", "[", 
  RowBox[{"\"\<eikonal2d\>\"", ",", 
   RowBox[{"\"\<Language\>\"", "\[Rule]", "\"\<Fortran90\>\""}], ",", 
   RowBox[{"\"\<Mode\>\"", "\[Rule]", "\"\<Optimal\>\""}], ",", 
   RowBox[{"\"\<VectorLength\>\"", "\[Rule]", "50000"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"SMSModule", "[", 
   RowBox[{"\"\<eikonal2d\>\"", ",", 
    RowBox[{"Real", "[", 
     RowBox[{
      RowBox[{"x$$", "[", 
       RowBox[{"4", ",", "2"}], "]"}], ",", 
      RowBox[{"phi3$$", "[", "3", "]"}], ",", "pow$$", ",", "penalty$$", ",", 
      "cl$$", ",", "g$$", ",", 
      RowBox[{"force$$", "[", "8", "]"}], ",", 
      RowBox[{"stiffness$$", "[", 
       RowBox[{"8", ",", "8"}], "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "\[DoubleRightTee]", 
   RowBox[{"SMSReal", "[", 
    RowBox[{"Array", "[", 
     RowBox[{"x$$", ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"phi3", "\[DoubleRightTee]", 
   RowBox[{"SMSReal", "[", 
    RowBox[{"Array", "[", 
     RowBox[{"phi3$$", ",", 
      RowBox[{"{", "3", "}"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pow", "\[DoubleRightTee]", 
   RowBox[{"SMSReal", "[", "pow$$", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"penalty", "\[DoubleRightTee]", 
   RowBox[{"SMSReal", "[", "penalty$$", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cl", "\[DoubleRightTee]", 
   RowBox[{"SMSReal", "[", "cl$$", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g", "\[DoubleRightTee]", 
   RowBox[{"SMSReal", "[", "g$$", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"force", "\[DoubleRightTee]", 
   RowBox[{"SMSReal", "[", 
    RowBox[{"Array", "[", 
     RowBox[{"force$$", ",", 
      RowBox[{"{", "8", "}"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stiffness", "\[DoubleRightTee]", 
   RowBox[{"SMSReal", "[", 
    RowBox[{"Array", "[", 
     RowBox[{"stiffness$$", ",", 
      RowBox[{"{", 
       RowBox[{"8", ",", "8"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xc", "\[DoubleRightTee]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "2"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"3", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"3", ",", "2"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"4", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"4", ",", "2"}], "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"var", "\[DoubleRightTee]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "2"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"3", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"3", ",", "2"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"4", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"x", "[", 
      RowBox[{"[", 
       RowBox[{"4", ",", "2"}], "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x11", "\[DoubleRightTee]", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x12", "\[DoubleRightTee]", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x21", "\[DoubleRightTee]", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "1"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x22", "\[DoubleRightTee]", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x31", "\[DoubleRightTee]", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"3", ",", "1"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x32", "\[DoubleRightTee]", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"3", ",", "2"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x41", "\[DoubleRightTee]", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"4", ",", "1"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x42", "\[DoubleRightTee]", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"4", ",", "2"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.4261861348125*^9, 3.426186161828125*^9}, {
   3.427542224*^9, 3.4275422243125*^9}, 3.4275453758125*^9, {
   3.42754623571875*^9, 3.42754626359375*^9}, 3.42754785565625*^9, 
   3.427548169671875*^9, {3.42927996009375*^9, 3.429279962296875*^9}, {
   3.438439387125*^9, 3.438439388*^9}, {3.4404361632930803`*^9, 
   3.440436166949026*^9}, {3.445870620584727*^9, 3.445870623790863*^9}, {
   3.446216228289334*^9, 3.446216282742811*^9}, {3.44621631868624*^9, 
   3.44621631885499*^9}, {3.446216351102205*^9, 3.446216351183056*^9}, {
   3.446293786104152*^9, 3.446293792183764*^9}, 3.446475967218207*^9, {
   3.446880843300035*^9, 3.446880844170237*^9}, 3.446890826068512*^9, {
   3.446893822274331*^9, 3.446893824059276*^9}, {3.447498629269288*^9, 
   3.447498632900706*^9}, {3.448042303102645*^9, 3.448042305542992*^9}, {
   3.44809135248275*^9, 3.448091353321991*^9}, {3.44811001211119*^9, 
   3.448110041936853*^9}, {3.448110145266873*^9, 3.448110147053007*^9}, {
   3.44811094662273*^9, 3.448110948517034*^9}, {3.448112278914509*^9, 
   3.448112285473276*^9}, {3.448123744745762*^9, 3.448123753042899*^9}, {
   3.44813502902954*^9, 3.448135030591645*^9}, 3.448139237885815*^9, {
   3.448142207768088*^9, 3.448142212708065*^9}, {3.448146572727599*^9, 
   3.448146580081447*^9}, 3.448147365156846*^9, {3.4481830845304*^9, 
   3.448183087333543*^9}, {3.448297404805592*^9, 3.448297410149173*^9}, {
   3.448299943601687*^9, 3.448299943781274*^9}, {3.448545221410957*^9, 
   3.448545240547647*^9}, {3.448558032541431*^9, 3.448558049429341*^9}, {
   3.448577645025915*^9, 3.44857765766511*^9}, 3.448646244269343*^9, 
   3.448646303633465*^9, 3.448650150323119*^9, 3.448650194397192*^9, {
   3.450986663069806*^9, 3.450986698661041*^9}, {3.450986784898303*^9, 
   3.450986790407636*^9}, {3.45103843644679*^9, 3.451038454318932*^9}, {
   3.451038959733551*^9, 3.451038967300267*^9}, {3.451055116551082*^9, 
   3.45105514580022*^9}, {3.451056853936622*^9, 3.451056898166103*^9}, {
   3.451056930046932*^9, 3.451056960541834*^9}, 3.451057078682105*^9, {
   3.451057636755808*^9, 3.451057737642023*^9}, {3.451057860991008*^9, 
   3.451057866211105*^9}, {3.451058114122273*^9, 3.451058174190255*^9}, {
   3.45105828772525*^9, 3.451058319340709*^9}, {3.45105938792707*^9, 
   3.451059418178435*^9}, {3.451059483159359*^9, 3.451059485981179*^9}, {
   3.451059587072235*^9, 3.45105962136382*^9}, {3.451107615179875*^9, 
   3.451107620457742*^9}, {3.451115408251421*^9, 3.45111541171154*^9}, 
   3.451115750908897*^9, 3.451115818129735*^9, {3.451115980880613*^9, 
   3.451116031212839*^9}, {3.451126950600027*^9, 3.451126980243674*^9}, {
   3.451127037721711*^9, 3.451127053884392*^9}, {3.451127806730613*^9, 
   3.451127822216624*^9}, {3.451128076675198*^9, 3.451128099022692*^9}, {
   3.451128757324267*^9, 3.451128758462233*^9}, {3.451287067579806*^9, 
   3.451287100839201*^9}, {3.451299867003715*^9, 3.451299903089595*^9}, {
   3.451301484362469*^9, 3.451301491688129*^9}, {3.451303265833068*^9, 
   3.451303272679346*^9}, 3.451367044615671*^9, 3.451577192156044*^9, 
   3.451583714178725*^9, 3.451597162697447*^9, 3.451671931392434*^9, {
   3.45173512749507*^9, 3.451735128498657*^9}, {3.451991089529819*^9, 
   3.451991110666354*^9}, {3.451991144046453*^9, 3.45199114587802*^9}, {
   3.451991462846256*^9, 3.451991500362782*^9}, {3.451997916067656*^9, 
   3.451997916972168*^9}, {3.45199890129247*^9, 3.451998915997358*^9}, {
   3.45200670935004*^9, 3.452006715874024*^9}, {3.452012469910067*^9, 
   3.452012490173022*^9}, {3.456834853771174*^9, 3.456834855049622*^9}, {
   3.457254849180555*^9, 3.457254849655453*^9}, {3.457262386447555*^9, 
   3.457262421881778*^9}, {3.45726279128421*^9, 3.457262797305015*^9}, {
   3.457262841759947*^9, 3.457262846067908*^9}, {3.457263404382782*^9, 
   3.457263409199305*^9}, {3.457266457136763*^9, 3.45726646766391*^9}, {
   3.457267035582186*^9, 3.45726704163021*^9}, {3.457270087475956*^9, 
   3.457270103695919*^9}, {3.457270221117715*^9, 3.457270242777457*^9}, {
   3.457270745161356*^9, 3.457270746962593*^9}, 3.457272451595813*^9, {
   3.457272644930151*^9, 3.457272645570836*^9}, {3.457272842194768*^9, 
   3.457272842912609*^9}, {3.457273016027723*^9, 3.457273018103411*^9}, {
   3.457344956229929*^9, 3.457344957044853*^9}, {3.457345279448009*^9, 
   3.457345310101467*^9}, {3.457346557602675*^9, 3.457346558899008*^9}, {
   3.457351598835738*^9, 3.457351603910381*^9}, 3.457352361031333*^9, {
   3.457429905535572*^9, 3.457429906293728*^9}, 3.457769376744449*^9, {
   3.457782697718182*^9, 3.457782698992462*^9}, {3.457782908631504*^9, 
   3.457783004991385*^9}, {3.457783036491727*^9, 3.457783048514168*^9}, {
   3.457791318440554*^9, 3.457791320730181*^9}, {3.459591288632172*^9, 
   3.459591305681431*^9}, {3.459596642591884*^9, 3.459596652561107*^9}, {
   3.459597155683266*^9, 3.459597161835298*^9}, {3.459699400918235*^9, 
   3.45969940483994*^9}, 3.459699653553062*^9, {3.4596999207252*^9, 
   3.459699932561174*^9}, {3.459700591181047*^9, 3.459700592712694*^9}, {
   3.459700794907302*^9, 3.459700796404009*^9}, {3.459700899131591*^9, 
   3.459700902381678*^9}, 3.466151719058118*^9, {3.466152733054849*^9, 
   3.466152735813437*^9}, {3.466153344049096*^9, 3.466153352190165*^9}, 
   3.466153863479047*^9, {3.466153894892956*^9, 3.466153895123059*^9}, {
   3.466154039385586*^9, 3.466154043080144*^9}, {3.466154459896009*^9, 
   3.466154485883275*^9}, {3.466167328783002*^9, 3.466167357320884*^9}, 
   3.466167851581121*^9, {3.466169862212552*^9, 3.466169872033107*^9}, {
   3.466246197443149*^9, 3.466246200364558*^9}, {3.466271718668324*^9, 
   3.466271725427105*^9}, {3.466280497375553*^9, 3.466280506692231*^9}, {
   3.466342108091231*^9, 3.466342109292054*^9}, 3.466593247941474*^9, {
   3.468828705700693*^9, 3.468828725929084*^9}, 3.468828941220716*^9, {
   3.468921462092437*^9, 3.468921470354116*^9}, 3.474976312045309*^9, 
   3.475069861869422*^9, {3.47541925223758*^9, 3.475419324139022*^9}, 
   3.475419988509012*^9, {3.475422495701305*^9, 3.47542249762652*^9}, {
   3.475422937448763*^9, 3.475422937927682*^9}, 3.475422976435597*^9, 
   3.603282668225164*^9, {3.6078447140218687`*^9, 3.6078447186266193`*^9}, {
   3.608443914927297*^9, 3.608443916291141*^9}, {3.608444148203573*^9, 
   3.608444150467551*^9}, {3.608444830671317*^9, 3.608444858823447*^9}, {
   3.608447739770515*^9, 3.608447740547462*^9}, 3.608447997168189*^9, {
   3.608452006153314*^9, 3.608452024501142*^9}, 3.60846593050342*^9, {
   3.738579123239665*^9, 3.738579129986423*^9}, {3.738579209589061*^9, 
   3.73857921183033*^9}, 3.872487736993638*^9, {3.872488622449188*^9, 
   3.872488624868854*^9}, {3.872488660600462*^9, 3.872488666831192*^9}, {
   3.872496308256352*^9, 3.872496346736*^9}, {3.872505156368672*^9, 
   3.872505166875224*^9}, {3.8725055707669163`*^9, 3.872505606486713*^9}, {
   3.872505648035056*^9, 3.8725056524753017`*^9}, {3.872505684850806*^9, 
   3.872505692969759*^9}, {3.8725360205005627`*^9, 3.872536040902186*^9}, {
   3.8725363320694847`*^9, 3.8725363771482162`*^9}, {3.872536595757229*^9, 
   3.872536597327199*^9}, {3.872538509195862*^9, 3.872538512229639*^9}, {
   3.872538778957861*^9, 3.872538781001481*^9}, {3.872586812472205*^9, 
   3.872586812774186*^9}, {3.872589054728408*^9, 3.872589080816875*^9}, {
   3.872589611581827*^9, 3.872589655514401*^9}, {3.872604425765678*^9, 
   3.872604461006082*^9}, {3.872604525061173*^9, 3.87260456548764*^9}, 
   3.872604801929764*^9, {3.8726551846507473`*^9, 3.8726551979841843`*^9}, {
   3.872657045773116*^9, 3.8726570604598007`*^9}, {3.872658372229491*^9, 
   3.872658375738697*^9}, {3.8726585291130733`*^9, 3.872658602957827*^9}, {
   3.8726590519873753`*^9, 3.872659060445551*^9}, {3.872670784584647*^9, 
   3.8726707983832073`*^9}, {3.872783649749505*^9, 3.872783679224183*^9}, {
   3.8727842922743387`*^9, 3.872784293689295*^9}, {3.872856618174768*^9, 
   3.8728566686867847`*^9}, {3.872933773919486*^9, 3.872933801498307*^9}, {
   3.872940716606098*^9, 3.8729407651125097`*^9}, {3.873109333360744*^9, 
   3.8731093653948298`*^9}, {3.873130515814272*^9, 3.873130517207075*^9}, {
   3.873450719020108*^9, 3.873450719285535*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"0d62dfc6-7c7f-4d44-bb9a-e81affc7bf95"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.87292503552252*^9, 3.872925075011492*^9, 3.8729256332434673`*^9, 
   3.872933821518602*^9, 3.872937361688649*^9, 3.872940770983276*^9, 
   3.872942264985392*^9, 3.872942461825485*^9, 3.872943238308834*^9, 
   3.872948673262993*^9, 3.87294870523627*^9, 3.8729501156262608`*^9, 
   3.872951468280499*^9, {3.872954879662416*^9, 3.872954898831586*^9}, 
   3.872965635007135*^9, 3.8729920818505583`*^9, 3.8730323568778553`*^9, {
   3.87303278006951*^9, 3.873032794087504*^9}, 3.873114750415738*^9, 
   3.873130337991385*^9, 3.8731306621753893`*^9, 3.873522592926715*^9, 
   3.8786451713800383`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"acdbfcf5-a6d1-4873-9529-7a295c7f7a7c"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"xi1", "=", 
   FractionBox[
    RowBox[{
     RowBox[{"x12", " ", 
      RowBox[{"(", 
       RowBox[{"x21", "-", "x41"}], ")"}]}], "+", 
     RowBox[{"x22", " ", "x41"}], "-", 
     RowBox[{"x21", " ", "x42"}], "+", 
     RowBox[{"x11", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x22"}], "+", "x42"}], ")"}]}]}], 
    RowBox[{
     RowBox[{
      RowBox[{"-", "x32"}], " ", "x41"}], "+", 
     RowBox[{"x22", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x31"}], "+", "x41"}], ")"}]}], "+", 
     RowBox[{"x21", " ", 
      RowBox[{"(", 
       RowBox[{"x32", "-", "x42"}], ")"}]}], "+", 
     RowBox[{"x31", " ", "x42"}]}]]}], ";", 
  RowBox[{"xi2", "=", 
   FractionBox[
    RowBox[{
     RowBox[{"x12", " ", "x21"}], "-", 
     RowBox[{"x11", " ", "x22"}], "-", 
     RowBox[{"x12", " ", "x31"}], "+", 
     RowBox[{"x22", " ", "x31"}], "+", 
     RowBox[{"x11", " ", "x32"}], "-", 
     RowBox[{"x21", " ", "x32"}]}], 
    RowBox[{
     RowBox[{"x22", " ", "x31"}], "-", 
     RowBox[{"x21", " ", "x32"}], "-", 
     RowBox[{"x22", " ", "x41"}], "+", 
     RowBox[{"x32", " ", "x41"}], "+", 
     RowBox[{"x21", " ", "x42"}], "-", 
     RowBox[{"x31", " ", "x42"}]}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xi1", "\[DoubleRightTee]", 
   RowBox[{"SMSMax", "[", 
    RowBox[{
     RowBox[{"SMSMin", "[", 
      RowBox[{"1", ",", "xi1"}], "]"}], ",", "0"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xi2", "\[DoubleRightTee]", 
   RowBox[{"SMSMax", "[", 
    RowBox[{
     RowBox[{"SMSMin", "[", 
      RowBox[{"1", ",", "xi2"}], "]"}], ",", "0"}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.872816263898636*^9, 3.872816287011114*^9}, {
   3.8729373092957497`*^9, 3.872937357910017*^9}, {3.8729422569815397`*^9, 
   3.872942260135386*^9}, 3.8729482857931747`*^9, {3.8729919854700193`*^9, 
   3.87299200397263*^9}, {3.872992056202403*^9, 3.8729920756047153`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"ad493376-2150-4132-ac58-77e797cfd1bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ffr", "\[DoubleRightTee]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "-", "xi1", "-", "xi2"}], ",", "xi1", ",", "xi2"}], "}"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.872947964381494*^9, 3.87294796641747*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"d0f76920-d43c-4fca-a224-103294edf67e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ff", "\[DoubleRightTee]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", 
     RowBox[{"1", "-", "xi1", "-", "xi2"}], ",", "xi1", ",", "xi2"}], "}"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p1", "\[DoubleRightTee]", 
   RowBox[{"phi3", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p2", "\[DoubleRightTee]", 
   RowBox[{"phi3", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p3", "\[DoubleRightTee]", 
   RowBox[{"phi3", "[", 
    RowBox[{"[", "3", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gphi3", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"p2", " ", "x22"}], "-", 
      RowBox[{"p3", " ", "x22"}], "-", 
      RowBox[{"p1", " ", "x32"}], "+", 
      RowBox[{"p3", " ", "x32"}], "+", 
      RowBox[{"p1", " ", "x42"}], "-", 
      RowBox[{"p2", " ", "x42"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "p3"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "x21"}], "+", "x31"}], ")"}]}], "-", 
      RowBox[{"p2", " ", 
       RowBox[{"(", 
        RowBox[{"x21", "-", "x41"}], ")"}]}], "-", 
      RowBox[{"p1", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "x31"}], "+", "x41"}], ")"}]}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gphi3", "=", 
   RowBox[{"gphi3", "/", 
    RowBox[{"SMSSqrt", "[", 
     RowBox[{"gphi3", ".", "gphi3"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.872604417291566*^9, 3.87260441734585*^9}, {
   3.872604696278371*^9, 3.872604700851866*^9}, {3.872604750091488*^9, 
   3.872604753151455*^9}, {3.87265516568908*^9, 3.872655181343112*^9}, 
   3.872657096211177*^9, {3.872670781010427*^9, 3.87267080090271*^9}, 
   3.872816245397153*^9, {3.872816280317862*^9, 3.8728162806242027`*^9}, {
   3.872924991073551*^9, 3.872924991282691*^9}, 3.8729365872227287`*^9, {
   3.872947950813521*^9, 3.872947951481999*^9}, {3.872948260418322*^9, 
   3.8729482795337973`*^9}, {3.8729483351470757`*^9, 3.872948367864292*^9}, {
   3.872951405572237*^9, 3.872951407450697*^9}, {3.872954819247559*^9, 
   3.87295489191756*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"04902838-b474-4968-8038-084495960547"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"direcnode", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "8"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"direcnode", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "*", 
    RowBox[{"gphi3", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"direcnode", "[", 
    RowBox[{"[", "2", "]"}], "]"}], "=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "*", 
    RowBox[{"gphi3", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"direcnode", "[", 
    RowBox[{"[", "3", "]"}], "]"}], "=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "*", 
    RowBox[{"gphi3", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"direcnode", "[", 
    RowBox[{"[", "4", "]"}], "]"}], "=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "*", 
    RowBox[{"gphi3", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"direcnode", "[", 
    RowBox[{"[", "5", "]"}], "]"}], "=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"[", "3", "]"}], "]"}], "*", 
    RowBox[{"gphi3", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"direcnode", "[", 
    RowBox[{"[", "6", "]"}], "]"}], "=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"[", "3", "]"}], "]"}], "*", 
    RowBox[{"gphi3", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"direcnode", "[", 
    RowBox[{"[", "7", "]"}], "]"}], "=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"[", "4", "]"}], "]"}], "*", 
    RowBox[{"gphi3", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"direcnode", "[", 
    RowBox[{"[", "8", "]"}], "]"}], "=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"[", "4", "]"}], "]"}], "*", 
    RowBox[{"gphi3", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"phi", "=", 
   RowBox[{"ffr", ".", "phi3"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.872658354730874*^9, 3.8726583644971037`*^9}, 
   3.872659086903008*^9, {3.872924992398931*^9, 3.872924992595872*^9}, {
   3.872947968585474*^9, 3.872948012400681*^9}, 3.872948067989174*^9, 
   3.8729482587832403`*^9, {3.872948461222086*^9, 3.872948659234749*^9}, {
   3.872948690477804*^9, 3.8729487028743887`*^9}, {3.873130605363634*^9, 
   3.873130614554192*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"6701cfcf-4355-4968-934d-7b3147db1aaf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "\[DoubleRightTee]", 
   RowBox[{"cl", "*", 
    RowBox[{"Log", "[", "phi", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8726583824754953`*^9, 3.872658391760441*^9}, 
   3.872659088046286*^9, {3.8726592284350567`*^9, 3.872659236305265*^9}, {
   3.8729193630191708`*^9, 3.872919390399221*^9}, 3.872924772358717*^9, 
   3.872942458516975*^9, 3.8729494800466757`*^9, {3.872950104663109*^9, 
   3.872950110673744*^9}, {3.872965622551009*^9, 3.872965625485449*^9}, {
   3.873032329473016*^9, 3.87303233916716*^9}, {3.8730327615294237`*^9, 
   3.873032775989867*^9}, 3.878645135890081*^9, 
   3.886857774449028*^9},ExpressionUUID->"1055ea14-df48-4123-9307-\
182f2a0cf685"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"force", "\[DoubleRightTee]", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "^", "pow"}]}], "*", "penalty", "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"SMSMin", "[", 
       RowBox[{"0", ",", "g"}], "]"}], "^", "pow"}], ")"}], "*", 
    "direcnode"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stiffness", "\[DoubleRightTee]", 
   RowBox[{"SMSD", "[", 
    RowBox[{"force", ",", "var"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.872658431946588*^9, 3.872658433535996*^9}, {
   3.872658489917262*^9, 3.872658518672669*^9}, {3.872659037908125*^9, 
   3.8726590382636547`*^9}, {3.872659091348069*^9, 3.872659111411284*^9}, 
   3.87265914774862*^9, {3.872670806325169*^9, 3.8726708065662823`*^9}, {
   3.872933812432012*^9, 3.872933812700715*^9}, {3.8729431891449337`*^9, 
   3.872943192228136*^9}, {3.872943467482362*^9, 3.872943473054164*^9}, {
   3.8729435148663607`*^9, 3.8729435303303757`*^9}, {3.872948547077303*^9, 
   3.872948550026642*^9}, {3.878645155241632*^9, 3.8786451665948143`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"da1edb37-5f79-4ad6-b50c-d245bfc9f5a2"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"SMSExport", "[", 
    RowBox[{"g", ",", "g$$"}], "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.451058353650447*^9, 3.451058401058922*^9}, {
   3.451059489857677*^9, 3.451059493325093*^9}, {3.451114899316376*^9, 
   3.451114903066217*^9}, {3.451128545911741*^9, 3.451128552353264*^9}, {
   3.451287141963631*^9, 3.45128714839035*^9}, {3.45129987552087*^9, 
   3.451299875820781*^9}, {3.451299912097229*^9, 3.45129991923675*^9}, {
   3.451308433836772*^9, 3.451308474128773*^9}, {3.451367061748465*^9, 
   3.451367061984323*^9}, {3.451369109596999*^9, 3.451369111625201*^9}, {
   3.451369625410766*^9, 3.4513696259568*^9}, {3.451998920630703*^9, 
   3.451998933693121*^9}, {3.452012496837229*^9, 3.45201249707413*^9}, {
   3.457270749205419*^9, 3.457270764620708*^9}, {3.457292018992459*^9, 
   3.457292019974888*^9}, {3.459585310102734*^9, 3.459585313104322*^9}, {
   3.459591901379427*^9, 3.459591926508175*^9}, {3.459592001728168*^9, 
   3.459592004078789*^9}, 3.459597083594816*^9, {3.459597165908312*^9, 
   3.459597187708829*^9}, {3.459699663034675*^9, 3.459699663406757*^9}, {
   3.466152750269135*^9, 3.466152765984224*^9}, 3.466153361095933*^9, {
   3.466153867078035*^9, 3.466153867406601*^9}, {3.46615389873618*^9, 
   3.466153899035218*^9}, {3.466154489848504*^9, 3.466154506502611*^9}, {
   3.466167609341658*^9, 3.466167619378535*^9}, {3.466167856892561*^9, 
   3.466167857177692*^9}, {3.466169877678269*^9, 3.466169881326963*^9}, {
   3.466246204192895*^9, 3.466246209938308*^9}, 3.466271733293358*^9, 
   3.466280528534313*^9, {3.466342117741083*^9, 3.466342139869712*^9}, {
   3.466593248165406*^9, 3.466593248247114*^9}, {3.468828738742141*^9, 
   3.468828751750425*^9}, {3.468828940925596*^9, 3.468828940962564*^9}, {
   3.468921492639324*^9, 3.468921500564359*^9}, {3.474976223042476*^9, 
   3.474976223340545*^9}, {3.475069864858926*^9, 3.475069865113241*^9}, {
   3.47541933226751*^9, 3.475419346105598*^9}, {3.475419467127081*^9, 
   3.475419486265952*^9}, {3.475419537619363*^9, 3.475419540947786*^9}, {
   3.475419630199724*^9, 3.475419637177321*^9}, {3.475419781712018*^9, 
   3.47541996239467*^9}, {3.475419996897877*^9, 3.47542001595415*^9}, {
   3.475421070858977*^9, 3.47542109363953*^9}, {3.475421257187016*^9, 
   3.475421374132527*^9}, {3.475421436100039*^9, 3.475421482628588*^9}, {
   3.475421532466649*^9, 3.475421545296547*^9}, {3.475421614919203*^9, 
   3.475421692125935*^9}, {3.475421885624146*^9, 3.475421918730186*^9}, {
   3.475422309534267*^9, 3.47542237620289*^9}, {3.47542244907696*^9, 
   3.475422504163846*^9}, {3.475422602731203*^9, 3.475422629361943*^9}, {
   3.475422806110191*^9, 3.475422857607793*^9}, {3.475422941240057*^9, 
   3.475422941700465*^9}, {3.475423007011136*^9, 3.475423007269823*^9}, {
   3.6078447315473223`*^9, 3.607844735441931*^9}, {3.608443920322423*^9, 
   3.6084439235641108`*^9}, 3.608444875655683*^9, {3.608445635990375*^9, 
   3.608445636172071*^9}, {3.60844602485894*^9, 3.608446065685378*^9}, {
   3.6084462821893806`*^9, 3.6084462908389053`*^9}, {3.608446321518838*^9, 
   3.6084463451529016`*^9}, 3.60844660991606*^9, {3.608446759805909*^9, 
   3.608446771652302*^9}, {3.608447056433112*^9, 3.608447079076877*^9}, {
   3.608447115798697*^9, 3.6084471856185102`*^9}, {3.608447263650483*^9, 
   3.608447276635027*^9}, {3.608447479585186*^9, 3.608447481718544*^9}, {
   3.6084476778606853`*^9, 3.608447680077746*^9}, {3.608448001341301*^9, 
   3.60844800155639*^9}, {3.608448034362605*^9, 3.608448034545697*^9}, {
   3.608452018787348*^9, 3.608452032451008*^9}, {3.608465933379928*^9, 
   3.6084659336905403`*^9}, {3.6092272153878317`*^9, 3.609227215975984*^9}, {
   3.6092276732762117`*^9, 3.609227781719268*^9}, {3.609247213091752*^9, 
   3.6092472199258833`*^9}, {3.6092523553768263`*^9, 3.609252358384406*^9}, {
   3.609258949250977*^9, 3.6092589860151377`*^9}, {3.6092593404543333`*^9, 
   3.609259347178318*^9}, {3.6092594080730343`*^9, 3.609259417247547*^9}, {
   3.609259486696287*^9, 3.6092594892415752`*^9}, {3.6095719241764393`*^9, 
   3.6095719244166718`*^9}, {3.609745996646336*^9, 3.609745999885325*^9}, {
   3.7385791347041683`*^9, 3.7385791796005507`*^9}, {3.872487740365849*^9, 
   3.872487740706197*^9}, 3.872536370552251*^9, {3.87260491512094*^9, 
   3.872604915410057*^9}, 3.872657100368458*^9, {3.872658444623726*^9, 
   3.872658446609247*^9}, {3.872659015216607*^9, 3.872659018746222*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"7d00169b-7e75-4886-956d-04b2cfe8a647"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SMSExport", "[", 
   RowBox[{"force", ",", "force$$"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SMSExport", "[", 
   RowBox[{"stiffness", ",", "stiffness$$"}], "]"}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.451128323713162*^9, 3.451128374168652*^9}, {
   3.451128522179808*^9, 3.451128522620626*^9}, {3.451128576726632*^9, 
   3.451128608285472*^9}, {3.451287110385163*^9, 3.451287135450437*^9}, {
   3.451296600869177*^9, 3.451296606261459*^9}, 3.451299863746271*^9, {
   3.451299941184416*^9, 3.451299962716903*^9}, {3.451301470519731*^9, 
   3.451301611702361*^9}, {3.451301707928926*^9, 3.451301710898028*^9}, {
   3.451302206174707*^9, 3.451302208088968*^9}, {3.451367075698796*^9, 
   3.451367125398989*^9}, {3.451367797019417*^9, 3.451367807158695*^9}, 
   3.45136801200373*^9, {3.451368081171767*^9, 3.451368085195039*^9}, {
   3.451368679732705*^9, 3.451368681208397*^9}, {3.451369100427972*^9, 
   3.451369102042862*^9}, 3.457254895139449*^9, {3.457262427069049*^9, 
   3.457262445324385*^9}, {3.457262815622212*^9, 3.457262826179434*^9}, {
   3.457263374092783*^9, 3.457263383928924*^9}, {3.457266479078287*^9, 
   3.45726652505868*^9}, 3.457270188414644*^9, {3.457270277520321*^9, 
   3.457270287993702*^9}, {3.457270424880702*^9, 3.457270425133141*^9}, 
   3.457292016829508*^9, {3.457350886728279*^9, 3.457350903812303*^9}, {
   3.457351615016707*^9, 3.457351622775598*^9}, {3.457769382651663*^9, 
   3.457769385388816*^9}, {3.459596827705382*^9, 3.459596834015036*^9}, {
   3.459597122782929*^9, 3.4595971514379*^9}, {3.459597334399951*^9, 
   3.459597335865542*^9}, {3.466153362203329*^9, 3.466153372491143*^9}, 
   3.466153692169472*^9, {3.466167620616815*^9, 3.466167635433337*^9}, {
   3.466271734776478*^9, 3.466271739985232*^9}, {3.466280531689816*^9, 
   3.466280551856091*^9}, 3.466857790318309*^9, {3.46685804507851*^9, 
   3.466858050040277*^9}, {3.466858575338207*^9, 3.466858717343186*^9}, {
   3.46685879093034*^9, 3.466858836987017*^9}, {3.466858888420011*^9, 
   3.466858889811977*^9}, {3.466859514266467*^9, 3.466859543247184*^9}, {
   3.466859692813602*^9, 3.466859711482272*^9}, 3.466860207975396*^9, {
   3.466860382045961*^9, 3.466860383153991*^9}, 3.46686084717535*^9, {
   3.466860971138561*^9, 3.466860982156679*^9}, {3.467638095224927*^9, 
   3.467638171900614*^9}, {3.467640004014138*^9, 3.467640005011615*^9}, {
   3.467640481939119*^9, 3.467640482896178*^9}, {3.468163752509076*^9, 
   3.468163757281457*^9}, {3.468165407695551*^9, 3.468165473349998*^9}, {
   3.468574898824894*^9, 3.468574908098918*^9}, {3.468828777823348*^9, 
   3.468828846643707*^9}, {3.468828941029557*^9, 3.468828941148111*^9}, {
   3.468921531294758*^9, 3.468921559908403*^9}, 3.474906102979319*^9, 
   3.474976306193874*^9, {3.474976336800735*^9, 3.474976337681634*^9}, {
   3.474992619919368*^9, 3.474992623283504*^9}, {3.475014852806986*^9, 
   3.475014853249046*^9}, {3.47506925100041*^9, 3.475069252287522*^9}, {
   3.475069781482408*^9, 3.475069781849872*^9}, {3.475419488383818*^9, 
   3.475419504064089*^9}, {3.475422890308402*^9, 3.47542290730233*^9}, {
   3.6084472789901533`*^9, 3.608447296492584*^9}, {3.608447814411045*^9, 
   3.608447815173456*^9}, {3.608447883562089*^9, 3.6084478845639057`*^9}, {
   3.608448005687561*^9, 3.6084480058761377`*^9}, {3.608452048380368*^9, 
   3.6084520512593813`*^9}, {3.608465959071002*^9, 3.608465959339552*^9}, {
   3.7385791619099083`*^9, 3.738579166787217*^9}, {3.8726584483546953`*^9, 
   3.8726584621391363`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"b2792313-8f9f-4622-a7f4-9290eb962853"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SMSWrite", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.447508077983658*^9, 3.447508078145165*^9}, {
   3.447508114486775*^9, 3.447508114821829*^9}, 3.451057126616637*^9, 
   3.457782306250087*^9, 3.475423077398872*^9},
 CellLabel->"In[52]:=",ExpressionUUID->"92e59b56-7b77-41e8-992a-4c3db459a708"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"File:\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontWeight->Bold,
      FontColor->RGBColor[0, 0, 1]], "\<\"eikonal2d.f90\"\>", 
     StyleBox["\<\"Size:\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontWeight->Bold,
      FontColor->RGBColor[0, 0, 1]], "7092"},
    {"\<\"Methods\"\>", "\<\"No.Formulae\"\>", "\<\"No.Leafs\"\>", 
     "\[SpanFromLeft]"},
    {
     StyleBox["\<\"eikonal2d\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontWeight->Bold,
      FontColor->RGBColor[0, 0, 1]], "130", "2542", "\[SpanFromLeft]"}
   },
   AutoDelete->False,
   GridBoxDividers->{"Rows" -> {1, 2}},
   GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Print",
 CellChangeTimes->{
  3.60328271709974*^9, 3.607844780737953*^9, 3.608447317551057*^9, 
   3.608447463711782*^9, 3.608447509424667*^9, {3.608447599802268*^9, 
   3.608447645751443*^9}, 3.60844771127472*^9, {3.608447908165387*^9, 
   3.608447918759512*^9}, 3.6084480120389643`*^9, 3.608448045806281*^9, 
   3.608452077643581*^9, 3.608465970342807*^9, 3.608466855447444*^9, {
   3.609227776389888*^9, 3.609227789578339*^9}, 3.609247227250061*^9, 
   3.609247268318152*^9, 3.609247362110815*^9, 3.609746019234445*^9, 
   3.611833163248283*^9, 3.7385790783414087`*^9, {3.738579170388669*^9, 
   3.7385791831330976`*^9}, 3.7385792162008142`*^9, 3.8726708193861094`*^9, 
   3.872783711956251*^9, 3.872784305465002*^9, 3.872856693967305*^9, 
   3.872866492161234*^9, 3.872919446006913*^9, 3.872925086987076*^9, 
   3.87292565440592*^9, 3.8729338328590508`*^9, 3.872937374697393*^9, 
   3.872940780547536*^9, 3.872942273148019*^9, 3.8729424676368847`*^9, 
   3.8729432439808817`*^9, 3.87294870963162*^9, 3.872950120054956*^9, 
   3.872951472783382*^9, 3.872954903352669*^9, 3.8729656394709253`*^9, 
   3.872992086441472*^9, 3.8730323620799713`*^9, {3.873032784897666*^9, 
   3.8730327990551777`*^9}, 3.873114754820231*^9, 3.873130342158462*^9, 
   3.873130666392478*^9, 3.873522597603691*^9, 3.878645176103792*^9},
 CellLabel->
  "During evaluation of \
In[52]:=",ExpressionUUID->"6735ad56-c02c-45ea-9124-f39dfaf66ad7"]
}, Open  ]]
},
WindowSize->{1725.75, 920.25},
WindowMargins->{{Automatic, -384}, {-123, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
Magnification->2.,
FrontEndVersion->"13.3 for Linux x86 (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"09763676-9f9f-4f3e-acbe-35162c3ec442"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 572, 13, 142, "Input",ExpressionUUID->"f10c1fdb-7478-48c6-a90d-bff160ea7957"],
Cell[CellGroupData[{
Cell[1155, 37, 13516, 270, 885, "Input",ExpressionUUID->"0d62dfc6-7c7f-4d44-bb9a-e81affc7bf95"],
Cell[14674, 309, 727, 11, 67, "Output",ExpressionUUID->"acdbfcf5-a6d1-4873-9529-7a295c7f7a7c"]
}, Open  ]],
Cell[15416, 323, 2065, 59, 301, "Input",ExpressionUUID->"ad493376-2150-4132-ac58-77e797cfd1bd"],
Cell[17484, 384, 335, 8, 59, "Input",ExpressionUUID->"d0f76920-d43c-4fca-a224-103294edf67e"],
Cell[17822, 394, 2322, 60, 316, "Input",ExpressionUUID->"04902838-b474-4968-8038-084495960547"],
Cell[20147, 456, 2922, 88, 431, "Input",ExpressionUUID->"6701cfcf-4355-4968-934d-7b3147db1aaf"],
Cell[23072, 546, 710, 13, 59, "Input",ExpressionUUID->"1055ea14-df48-4123-9307-182f2a0cf685"],
Cell[23785, 561, 1189, 25, 101, "Input",ExpressionUUID->"da1edb37-5f79-4ad6-b50c-d245bfc9f5a2"],
Cell[24977, 588, 4538, 64, 101, "Input",ExpressionUUID->"7d00169b-7e75-4886-956d-04b2cfe8a647"],
Cell[29518, 654, 3643, 54, 142, "Input",ExpressionUUID->"b2792313-8f9f-4622-a7f4-9290eb962853"],
Cell[CellGroupData[{
Cell[33186, 712, 339, 6, 59, "Input",ExpressionUUID->"92e59b56-7b77-41e8-992a-4c3db459a708"],
Cell[33528, 720, 2683, 57, 121, "Print",ExpressionUUID->"6735ad56-c02c-45ea-9124-f39dfaf66ad7"]
}, Open  ]]
}
]
*)

